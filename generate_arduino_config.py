#!/usr/bin/env python3
"""
üöÅ Arduino Config Generator
Generates Arduino configuration from .env file
"""

from config import config
import os

def generate_arduino_config():
    """Generate Arduino configuration header from Python config"""
    
    arduino_config = f'''// Auto-generated configuration from Python config
// Do not edit this file directly - edit .env instead and run generate_arduino_config.py

#ifndef CONFIG_H
#define CONFIG_H

// WiFi Configuration
const char* WIFI_SSID = "{config.WIFI_SSID}";
const char* WIFI_PASSWORD = "{config.WIFI_PASSWORD}";

// Servo Configuration
#define PAN_HOME {config.PAN_HOME}
#define TILT_HOME {config.TILT_HOME}
#define CENTER_ANGLE {config.CENTER_ANGLE}

// Servo pins (hardcoded for hardware)
#define PAN_PIN 18
#define TILT_PIN 19
#define BLASTER_PIN 21

// PWM settings
#define PWM_FREQ 50
#define PWM_RES 16

// Servo timing
#define SERVO_MIN_US 1000
#define SERVO_MAX_US 2000
#define SERVO_CENTER_US 1500

#endif // CONFIG_H
'''
    
    # Write to Arduino project directory
    config_path = "ESP32_OTA_Servo/config.h"
    with open(config_path, 'w') as f:
        f.write(arduino_config)
    
    print(f"‚úÖ Generated Arduino config: {config_path}")
    print(f"   WiFi SSID: {config.WIFI_SSID}")
    print(f"   WiFi Password: {'*' * len(config.WIFI_PASSWORD)}")
    print(f"   Servo Home: Pan={config.PAN_HOME}¬∞, Tilt={config.TILT_HOME}¬∞")
    print(f"\nüí° Include this in your Arduino code with: #include \"config.h\"")

if __name__ == "__main__":
    # Check if .env exists
    if not os.path.exists('.env'):
        print("‚ùå .env file not found!")
        print("üìã Create .env from template:")
        print("   1. Copy env_template.txt to .env")
        print("   2. Update with your WiFi credentials")
        print("   3. Run this script again")
        exit(1)
    
    generate_arduino_config()
